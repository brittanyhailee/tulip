{"version":3,"file":"memory.635c6dc836d4a076f868.hot-update.js","mappingssources":["webpack://tulip/./src/db/Request.ts","webpack://tulip/webpack/runtime/getFullHash"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar storeName = 'memories';\nvar dbName = 'tulip';\nvar db;\nvar request = indexedDB.open(dbName, 1);\nrequest.onerror = function (event) {\n    console.error('Error opening database:', event.target.error);\n};\nrequest.onsuccess = function (event) {\n    db = event.target.result;\n    getValueFromMemory();\n};\nrequest.onupgradeneeded = function (event) {\n    var db = event.target.result;\n    db.createObjectStore(storeName, { keyPath: 'id' });\n};\nexport var dbSize = function (db, dbName) { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n                var tx = db.transaction([dbName], 'readonly');\n                var store = tx.objectStore(storeName);\n                var cursorReq = store.openCursor();\n                var count = 0;\n                var size = 0;\n                cursorReq.onsuccess = function (e) {\n                    var cursor = cursorReq.result;\n                    if (cursor) {\n                        count++;\n                        size = size + cursor.value.blob.size;\n                        cursor.continue();\n                        console.log(\"Count: \", count);\n                    }\n                };\n                cursorReq.onerror = function (e) {\n                    reject(e);\n                };\n                tx.oncomplete = function (e) {\n                    resolve({\n                        count: count,\n                        size: size,\n                    });\n                };\n                tx.onabort = function (e) {\n                    reject(e);\n                };\n                tx.onerror = function (e) {\n                    reject(e);\n                };\n            })];\n    });\n}); };\nvar maxKey = 0;\nvar keysArray = [];\nvar randomKeyTest = 0;\nfunction getSize() {\n    return __awaiter(this, void 0, void 0, function () {\n        var transaction, objectStore, getAllKeysRequest, countRequest;\n        return __generator(this, function (_a) {\n            transaction = db.transaction(storeName, \"readonly\");\n            objectStore = transaction.objectStore(storeName);\n            getAllKeysRequest = objectStore.getAllKeys();\n            getAllKeysRequest.onsuccess = function () {\n                keysArray = getAllKeysRequest.result;\n                console.log(\"keysArray: \" + keysArray);\n            };\n            countRequest = objectStore.count();\n            countRequest.onsuccess = function () {\n                maxKey = countRequest.result;\n                console.log(countRequest.result);\n                return countRequest.result;\n            };\n            return [2 /*return*/];\n        });\n    });\n}\nfunction getRandomKey() {\n    var min = 1;\n    console.log(\"keys array is \" + keysArray);\n    console.log(\"your key is \" + keysArray[0]);\n    if (keysArray.length === 1) {\n        return keysArray[0];\n    }\n    // Testing\n    var max = keysArray.length - 1;\n    // const key = keysArray[randomKeyTest];\n    // End of Testing\n    var setRandomKey = Math.floor(Math.random() * (max - min + 1));\n    return keysArray[setRandomKey];\n}\nexport function getValueFromMemory() {\n    return new Promise(function (resolve, reject) {\n        getSize();\n        var key = getRandomKey();\n        if (key != undefined) {\n            var transaction = db.transaction(storeName, \"readonly\");\n            var store = transaction.objectStore(storeName);\n            // const key = 1;\n            // PROBLEM IS WHEN THIS RETURNS UNDEFINED \n            // if (key == undefined) {\n            //     key = 1;\n            // }\n            console.log(\"the key we are getting is \" + key);\n            var getRequest = store.get(key);\n            getRequest.onsuccess = function (event) {\n                var value = event.target.result;\n                if (value) {\n                    console.log(\"Value retrieved: \", value);\n                    console.log(\"Memory: \", value.name);\n                    resolve(JSON.stringify(value.name));\n                }\n                else {\n                    console.log(\"No value found for key: \", key);\n                    resolve(\"No value found for key: \" + key);\n                }\n            };\n            getRequest.onerror = function (event) {\n                console.error(\"Error getting value: \", event);\n            };\n        }\n        else {\n            console.log('key is currently undefined');\n        }\n    });\n}\n","__webpack_require__.h = () => (\"8500d7fb333e78965041\")"],"names":[],"sourceRoot":""}