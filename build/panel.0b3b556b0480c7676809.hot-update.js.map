{"version":3,"file":"panel.0b3b556b0480c7676809.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxhTA","sources":["webpack://tulip/./src/pages/Panel/Panel.css","webpack://tulip/./src/pages/Panel/Panel.css?34a9","webpack://tulip/./src/db/indexedDb.ts","webpack://tulip/./src/pages/Panel/DB.tsx","webpack://tulip/./src/pages/Panel/Panel.tsx","webpack://tulip/./src/pages/Panel/indexedDb.ts","webpack://tulip/./node_modules/idb/build/index.js","webpack://tulip/webpack/runtime/getFullHash"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"html {\\n  width: 400px;\\n  height: 260px;\\n  margin: 0;\\n  padding: 0;\\n  /* background-image: url(\\\"../../assets/img/tulip_pixel.png\\\"); */\\n  background-color: cadetblue;\\n  /* background-color: pink; */\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-attachment: fixed;\\n}\\n\\n#input {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n#memory {\\n  height: 100px;\\n  border-radius: 10px;\\n  width: 300px;\\n}\\n\\nbutton {\\n  margin: 15px;\\n  width: 70px;\\n  height: 30px;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pages/Panel/Panel.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,YAAA;EACA,aAAA;EACA,SAAA;EACA,UAAA;EACA,+DAAA;EACA,2BAAA;EACA,4BAAA;EACA,4BAAA;EACA,sBAAA;EACA,4BAAA;AACF;;AAEA;EACE,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AACF;;AAGA;EACE,aAAA;EACA,mBAAA;EACA,YAAA;AAAF;;AAGA;EACE,YAAA;EACA,WAAA;EACA,YAAA;AAAF\",\"sourcesContent\":[\"html {\\n  width: 400px;\\n  height: 260px;\\n  margin: 0;\\n  padding: 0;\\n  /* background-image: url(\\\"../../assets/img/tulip_pixel.png\\\"); */\\n  background-color: cadetblue;\\n  /* background-color: pink; */\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-attachment: fixed;\\n}\\n\\n#input {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n\\n}\\n\\n#memory {\\n  height: 100px;\\n  border-radius: 10px;\\n  width: 300px;\\n}\\n\\nbutton {\\n  margin: 15px;\\n  width: 70px;\\n  height: 30px;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./Panel.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./Panel.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./Panel.css\";\n       export default content && content.locals ? content.locals : undefined;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { openDB } from 'idb';\nvar IndexedDb = /** @class */ (function () {\n    function IndexedDb(database) {\n        this.database = database;\n    }\n    IndexedDb.prototype.createObjectStore = function (tableNames) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, error_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 3]);\n                        _a = this;\n                        return [4 /*yield*/, openDB(this.database, 1, {\n                                upgrade: function (db) {\n                                    for (var _i = 0, tableNames_1 = tableNames; _i < tableNames_1.length; _i++) {\n                                        var tableName = tableNames_1[_i];\n                                        if (db.objectStoreNames.contains(tableName)) {\n                                            continue;\n                                        }\n                                        db.createObjectStore(tableName, { autoIncrement: true, keyPath: 'id' });\n                                    }\n                                },\n                            })];\n                    case 1:\n                        _a.db = _b.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _b.sent();\n                        return [2 /*return*/, false];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.getValue = function (tableName, id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readonly');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.get(id)];\n                    case 1:\n                        result = _a.sent();\n                        console.log('Get Data ', JSON.stringify(result));\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.getAllValue = function (tableName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readonly');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.getAll()];\n                    case 1:\n                        result = _a.sent();\n                        console.log('Get All Data', JSON.stringify(result));\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.putValue = function (tableName, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readwrite');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.put(value)];\n                    case 1:\n                        result = _a.sent();\n                        console.log('Put Data ', JSON.stringify(result));\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.putBulkValue = function (tableName, values) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, _i, values_1, value, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readwrite');\n                        store = tx.objectStore(tableName);\n                        _i = 0, values_1 = values;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < values_1.length)) return [3 /*break*/, 4];\n                        value = values_1[_i];\n                        return [4 /*yield*/, store.put(value)];\n                    case 2:\n                        result = _a.sent();\n                        console.log('Put Bulk Data ', JSON.stringify(result));\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, this.getAllValue(tableName)];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.deleteValue = function (tableName, id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readwrite');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.get(id)];\n                    case 1:\n                        result = _a.sent();\n                        if (!result) {\n                            console.log('Id not found', id);\n                            return [2 /*return*/, result];\n                        }\n                        return [4 /*yield*/, store.delete(id)];\n                    case 2:\n                        _a.sent();\n                        console.log('Deleted Data', id);\n                        return [2 /*return*/, id];\n                }\n            });\n        });\n    };\n    return IndexedDb;\n}());\nexport default IndexedDb;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _a;\nvar _b;\n_b = $RefreshSig$();\nimport IndexedDb from './indexedDb';\nimport React, { useEffect, useState } from 'react';\nexport var Test = function () {\n    _b();\n    var _c = useState([]), books = _c[0], setBooks = _c[1];\n    useEffect(function () {\n        var runIndexDb = function () { return __awaiter(void 0, void 0, void 0, function () {\n            var indexedDb, book, allBooks;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        indexedDb = new IndexedDb('test');\n                        return [4 /*yield*/, indexedDb.createObjectStore(['books', 'students', 'memories'])];\n                    case 1:\n                        _c.sent();\n                        // Add data to IndexedDB\n                        return [4 /*yield*/, indexedDb.putValue('memories', { name: 'Don\\'t judge each day by the harvest you reap but by the seeds that you plant.' })];\n                    case 2:\n                        // Add data to IndexedDB\n                        _c.sent();\n                        return [4 /*yield*/, indexedDb.putValue('books', { name: 'Wicked' })];\n                    case 3:\n                        _c.sent();\n                        return [4 /*yield*/, indexedDb.putBulkValue('books', [\n                                { name: 'Little Women' },\n                                { name: 'Kafka on the Shore' },\n                                { name: 'This is the End' },\n                                { name: 'As the World Caves In' },\n                            ])];\n                    case 4:\n                        _c.sent();\n                        // Re-fetch all books after adding new ones\n                        return [4 /*yield*/, fetchBooks(indexedDb)];\n                    case 5:\n                        // Re-fetch all books after adding new ones\n                        _c.sent();\n                        return [4 /*yield*/, indexedDb.getValue('books', 1)];\n                    case 6:\n                        book = _c.sent();\n                        console.log('Single Book:', book);\n                        return [4 /*yield*/, indexedDb.getAllValue('books')];\n                    case 7:\n                        allBooks = _c.sent();\n                        console.log('All Books after Insertions:', allBooks);\n                        // Delete a book by ID and re-fetch\n                        return [4 /*yield*/, indexedDb.deleteValue('books', 1)];\n                    case 8:\n                        // Delete a book by ID and re-fetch\n                        _c.sent(); // Deletes book with ID 1\n                        return [4 /*yield*/, fetchBooks(indexedDb)];\n                    case 9:\n                        _c.sent(); // Re-fetch the updated list\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        var fetchBooks = function (indexedDb) { return __awaiter(void 0, void 0, void 0, function () {\n            var allBooks;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, indexedDb.getAllValue('books')];\n                    case 1:\n                        allBooks = _c.sent();\n                        setBooks(allBooks); // Update state with the fetched books\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        runIndexDb();\n        function getMemory() {\n            return __awaiter(this, void 0, void 0, function () {\n                var indexedDb, mem;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            indexedDb = new IndexedDb('test');\n                            return [4 /*yield*/, indexedDb.getValue('memories', 1)];\n                        case 1:\n                            mem = _c.sent();\n                            console.log(mem);\n                            return [2 /*return*/, mem];\n                    }\n                });\n            });\n        }\n        ;\n    }, []);\n    return (React.createElement(React.Fragment, null));\n};\n_a = Test;\n$RefreshReg$(_a, \"Test\");\n_b(Test, \"ww1JAI05mMsgubm5EIyBKqdj5S0=\");\nexport default Test;\n","var _a, _b;\nvar _c;\n_c = $RefreshSig$();\nimport React from 'react';\nimport './Panel.css';\n// import IndexedDb from './indexedDb';\nimport Test from './DB';\nimport IndexedDb from '../../db/indexedDb';\nvar Main = function () {\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h1\", null, \"Welcome to the Main Page\"),\n        React.createElement(Test, null)));\n};\n_a = Main;\n$RefreshReg$(_a, \"Main\");\n// await indexedDb.putValue('memories', { name: 'Don\\'t judge each day by the harvest you reap but by the seeds that you plant.'});\nvar Panel = function () {\n    _c();\n    var textareaRef = React.useRef(null);\n    var db = new IndexedDb('test');\n    db.createObjectStore(['memories']);\n    var handleClick = function () {\n        var memory = \"\";\n        var text = textareaRef.current.value.trim();\n        if (text.length !== 0) {\n            console.log(textareaRef.current.value);\n            memory = textareaRef.current.value;\n            db.putValue('memories', { name: memory });\n        }\n    };\n    return (React.createElement(\"div\", { className: \"container\" },\n        React.createElement(\"h1\", null, \"Your memory\"),\n        React.createElement(\"form\", { action: \"#\", id: \"input\" },\n            React.createElement(\"label\", null, \"What would you like to remember?\"),\n            React.createElement(\"textarea\", { ref: textareaRef, id: \"memory\" }),\n            React.createElement(\"button\", { onClick: handleClick, type: \"submit\", value: \"send\" }, \"send\"))));\n};\n_b = Panel;\n$RefreshReg$(_b, \"Panel\");\n_c(Panel, \"gJtT2aPnbUb4WH8ANBrFCKASbhs=\");\nexport default Panel;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { openDB } from 'idb';\nvar IndexedDb = /** @class */ (function () {\n    function IndexedDb(database) {\n        this.database = database;\n    }\n    IndexedDb.prototype.createObjectStore = function (tableNames) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, error_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 3]);\n                        _a = this;\n                        return [4 /*yield*/, openDB(this.database, 1, {\n                                upgrade: function (db) {\n                                    for (var _i = 0, tableNames_1 = tableNames; _i < tableNames_1.length; _i++) {\n                                        var tableName = tableNames_1[_i];\n                                        if (db.objectStoreNames.contains(tableName)) {\n                                            continue;\n                                        }\n                                        db.createObjectStore(tableName, { autoIncrement: true, keyPath: 'id' });\n                                    }\n                                },\n                            })];\n                    case 1:\n                        _a.db = _b.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _b.sent();\n                        return [2 /*return*/, false];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.getValue = function (tableName, id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readonly');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.get(id)];\n                    case 1:\n                        result = _a.sent();\n                        console.log('Get Data ', JSON.stringify(result));\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.getAllValue = function (tableName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readonly');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.getAll()];\n                    case 1:\n                        result = _a.sent();\n                        console.log('Get All Data', JSON.stringify(result));\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.putValue = function (tableName, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readwrite');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.put(value)];\n                    case 1:\n                        result = _a.sent();\n                        console.log('Put Data ', JSON.stringify(result));\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.putBulkValue = function (tableName, values) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, _i, values_1, value, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readwrite');\n                        store = tx.objectStore(tableName);\n                        _i = 0, values_1 = values;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < values_1.length)) return [3 /*break*/, 4];\n                        value = values_1[_i];\n                        return [4 /*yield*/, store.put(value)];\n                    case 2:\n                        result = _a.sent();\n                        console.log('Put Bulk Data ', JSON.stringify(result));\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, this.getAllValue(tableName)];\n                }\n            });\n        });\n    };\n    IndexedDb.prototype.deleteValue = function (tableName, id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = this.db.transaction(tableName, 'readwrite');\n                        store = tx.objectStore(tableName);\n                        return [4 /*yield*/, store.get(id)];\n                    case 1:\n                        result = _a.sent();\n                        if (!result) {\n                            console.log('Id not found', id);\n                            return [2 /*return*/, result];\n                        }\n                        return [4 /*yield*/, store.delete(id)];\n                    case 2:\n                        _a.sent();\n                        console.log('Deleted Data', id);\n                        return [2 /*return*/, id];\n                }\n            });\n        });\n    };\n    return IndexedDb;\n}());\nexport default IndexedDb;\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","__webpack_require__.h = () => (\"c118c61070ab36540f25\")"],"names":[],"sourceRoot":""}